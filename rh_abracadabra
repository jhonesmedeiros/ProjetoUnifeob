# Sistema RH AbracadabraKids - Projeto Completo (Flask Web App)
# Código polido e pronto para publicação, funcional em Python 3.11+
# Estrutura organizada: templates, banco SQLite, uploads e admin seguro

from flask import Flask, render_template, request, redirect, url_for, flash, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, FileField, SubmitField, PasswordField
from wtforms.validators import DataRequired, Length, Optional, Email
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
from werkzeug.utils import secure_filename
from passlib.hash import pbkdf2_sha256
from flask_mail import Mail, Message
from datetime import datetime
import os

# Configurações iniciais
BASE_DIR = os.path.abspath(os.getcwd())
DB_PATH = os.path.join(BASE_DIR, 'abracadabrakids.db')
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'troque-esta-chave')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{DB_PATH}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 5 * 1024 * 1024  # 5 MB max

# Mail opcional
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER')
app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', '587'))
app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', 'true').lower() in ('true','1','yes')
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', 'contratante@abracadabrakids.example')

COMPANY_NAME = 'AbracadabraKids'
COMPANY_LOCATION = 'Espírito Santo do Pinhal'
ALLOWED_EXTENSIONS = {'pdf','doc','docx','txt'}

# Extensões
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'admin_login'
mail = Mail(app)

# Models
class Applicant(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(64), nullable=False)
    last_name = db.Column(db.String(64), nullable=False)
    phone = db.Column(db.String(32))
    email = db.Column(db.String(128))
    reason = db.Column(db.Text, nullable=False)
    location = db.Column(db.String(128), default=COMPANY_LOCATION)
    resume_filename = db.Column(db.String(256))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Admin(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    def set_password(self,password):
        self.password_hash = pbkdf2_sha256.hash(password)
    def check_password(self,password):
        return pbkdf2_sha256.verify(password,self.password_hash)

# Forms
class ApplicationForm(FlaskForm):
    first_name = StringField('Nome', validators=[DataRequired(), Length(max=64)])
    last_name = StringField('Sobrenome', validators=[DataRequired(), Length(max=64)])
    phone = StringField('Telefone', validators=[Optional(), Length(max=32)])
    email = StringField('Email', validators=[Optional(), Email(), Length(max=128)])
    reason = TextAreaField('Por que deseja trabalhar conosco?', validators=[DataRequired(), Length(max=1200)])
    resume = FileField('Currículo (opcional)')
    submit = SubmitField('Enviar candidatura')

class LoginForm(FlaskForm):
    username = StringField('Usuário', validators=[DataRequired()])
    password = PasswordField('Senha', validators=[DataRequired()])
    submit = SubmitField('Entrar')

# Helpers
@login_manager.user_loader
def load_user(user_id):
    return Admin.query.get(int(user_id))

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.',1)[1].lower() in ALLOWED_EXTENSIONS

# Inicializar DB e criar admin default
with app.app_context():
    db.create_all()
    if Admin.query.count() == 0:
        admin_user = Admin(username=os.getenv('DEV_ADMIN_USER','admin'))
        admin_user.set_password(os.getenv('DEV_ADMIN_PASS','admin'))
        db.session.add(admin_user)
        db.session.commit()
        print('Admin default criado -> usuário: admin / senha: admin (altere em produção)')

if __name__=='__main__':
    app.run(debug=True)
